{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Not.2 - Redes Neuronales Convolucionales","provenance":[],"authorship_tag":"ABX9TyMhGTWMrhn+lItILNKzfDf9"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"GPnmF_87O_Vj"},"source":["# **Notebook 2 - Modelos Robustos y Redes Neuronales Convolucionales.**\n","\n","\n","*   Recuerda que puedes consultar la documentaci√≥n sobre una funci√≥n escribiendo **?** justo despu√©s de la funci√≥n: *Ejemplo: np.maximum?*\n","*   Puedes ejecutar el contenido de una celda con el atajo de teclado **CTRL+ENTER**\n","*   Utiliza **TAB** cada vez que quieras autocompletar una llamada a una funci√≥n.\n","*   Puedes ejecutar instrucciones de bash directamente desde el notebook usando **!** : *Ejemplo: !pip install tensorflow*\n","*   Recuerda que Google es tu amigo, y saber buscar la informaci√≥n en las documentaciones de las librer√≠as es muy importante.\n","*   Una soluci√≥n correcta no es la que funciona sino la que se entiende!\n","*   No dudes en preguntar cualquier duda al profesor que lleva todo el d√≠a "]},{"cell_type":"markdown","metadata":{"id":"E2yACAWXPOKF"},"source":["## **1. ¬øQu√© tan robusto es tu modelo?**\n","\n","Ayer comprobamos que haciendo uso de una simple *Red Neuronal Multicapa* podemos obtener una muy buena tasa de acierto (aprox. 96%) en la predicci√≥n de n√∫meros de MNIST. Pero... **¬øQu√© tan robusto es tu modelo?** O dicho de otra manera, ¬øc√≥mo se ven afectadas las predicciones de tu modelo cu√°ndo aparecen variaciones en tus datos de entrada?.\n","\n","Es decir, imag√≠nate que las im√°genes que le pasamos al modelo fueran generadas a partir de tomar una foto a un d√≠gito escrito por ti a mano. Es probable que algunas de las fotos que queramos predecir no est√©n centradas (ej. a) o no est√©n correctamente alineadas (ej. b) o sufran de mala calidad (ej. c). \n","\n","\n","<br>\n","\n","<centered> ![texto alternativo](https://i.imgur.com/qs86wF1.jpg) </centered>\n","<br>\n","\n","**üëÅ‚Äçüó® ¬øCrees que estas perturbaciones pueden afectar al rendimiento de tu modelo?**\n","\n","---\n","\n","**Tu tarea:** Genera im√°genes que presenten alg√∫n tipo de perturbaci√≥n y eval√∫alas con tu modelo entrado. \n","\n","üí° **1.** Reutiliza el c√≥digo visto ayer para entrenar nuevamente a una Red Neuronal Multicapa que sea capaz de clasificar los n√∫meros del dataset MNIST del 0 al 9. Como ya hemos visto, subdivide tus datos en ***train_set*** y ***test_set***, y utilizalos el set de entrenamiento para ajustar al modelo.\n","\n","\n","üí° **2.** Ahora, con tu red entrenada, utiliza tu ***test_set*** para generar nuevas versiones del set que incluyan las distintas perturbaciones que hemos mencionado anteriormente (translaciones, rotaciones o ruido). Para esto, haz uso de los m√©todos de ***ImageDataGenerator()*** de Keras, con los que podr√°s definir distintos tipos de preprocesamientos. Para la perturbaci√≥n con ruido, deber√°s de implementar tu propio m√©todo para a√±adir ruido y aplicarla a trav√©s del atributo ***preprocessing_function*** del generador.\n","\n","\n","üì£ `En traslaci√≥n desplaza un m√°ximo del 50% de los p√≠xeles de la imagen por cada eje. En rotaci√≥n no rotes m√°s de 90¬∫ la imagen. En ruido, a√±ade una cantidad m√°xima de ruido de +-0.25 y +-0.5 (25% Ruido y 50% Ruido).`\n","\n","\n","üí° **3.** Comprueba el funcionamiento de tus generadores extrayendo una imagen de cada uno de estos y visualiz√°ndolas.\n","\n","\n","üí° **4.** Ahora pasaremos  a evaluar c√≥mo se comportar√≠a tu modelo ante datos con perturbaciones. Antes de evaluar tus datasets distorsionados... ¬øc√≥mo esperas que sea este comportamiento? ¬øSer√° **robusto** frente a estas distorsiones? Eval√∫a a tu modelo con cada uno de los datos de los generadores para el ***test set*** y compara los resultados obtenidos. ¬øSe te ocurre alguna forma de evitar esto? ¬°Pues hazlo! :)"]},{"cell_type":"code","metadata":{"id":"TTeUXTeOSh05"},"source":["import pandas as pd\n","import numpy as np\n","\n","from tensorflow.keras.utils import to_categorical\n","from sklearn.model_selection import train_test_split\n","\n","data = pd.read_csv('./sample_data/mnist_train_small.csv', header=None)\n","\n","# Cargado los datos; Escalado los datos; One-HotCodeado los datos.\n","X = data.values[:, 1:] / 255\n","Y = to_categorical(data.values[:, 0:1])\n","\n","# Divisi√≥n de los datos en training y test.\n","X_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size=0.75)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"a12qx0Sx1uc0","executionInfo":{"status":"ok","timestamp":1603281195380,"user_tz":-120,"elapsed":17312,"user":{"displayName":"Carlos Santana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVvecaHB34gYjkoFZQot-Hnc3Xf1MVl3zUO4FoNL8=s64","userId":"06972008324074016783"}},"outputId":"60e3b9de-65be-4a20-df7f-2c224d648a9d","colab":{"base_uri":"https://localhost:8080/","height":406}},"source":["from tensorflow.keras.layers import *\n","from tensorflow.keras import Sequential\n","\n","# Planteado la arquitectura de la red.\n","model = Sequential()\n","\n","model.add(Flatten())\n","model.add(Dense(256, activation='relu'))\n","model.add(Dense(128, activation='relu'))\n","model.add(Dense(64,  activation='relu'))\n","model.add(Dense(32,  activation='relu'))\n","# ...\n","model.add(Dense(10,  activation='softmax'))\n","\n","# Compilamos a la red neuronal. (Funci√≥n de coste; Optimizador.)\n","model.compile(loss='categorical_crossentropy', metrics='accuracy', optimizer='adam')\n","\n","# Entrenar a la red neuronal.\n","model.fit(X_train, Y_train, validation_data=(X_test, Y_test) ,epochs=10)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/10\n","469/469 [==============================] - 2s 4ms/step - loss: 0.4341 - accuracy: 0.8691 - val_loss: 0.2124 - val_accuracy: 0.9388\n","Epoch 2/10\n","469/469 [==============================] - 2s 3ms/step - loss: 0.1597 - accuracy: 0.9513 - val_loss: 0.1722 - val_accuracy: 0.9484\n","Epoch 3/10\n","469/469 [==============================] - 2s 3ms/step - loss: 0.1010 - accuracy: 0.9690 - val_loss: 0.1575 - val_accuracy: 0.9548\n","Epoch 4/10\n","469/469 [==============================] - 2s 3ms/step - loss: 0.0722 - accuracy: 0.9777 - val_loss: 0.1938 - val_accuracy: 0.9440\n","Epoch 5/10\n","469/469 [==============================] - 2s 3ms/step - loss: 0.0627 - accuracy: 0.9807 - val_loss: 0.1345 - val_accuracy: 0.9600\n","Epoch 6/10\n","469/469 [==============================] - 2s 3ms/step - loss: 0.0448 - accuracy: 0.9867 - val_loss: 0.1450 - val_accuracy: 0.9582\n","Epoch 7/10\n","469/469 [==============================] - 2s 3ms/step - loss: 0.0404 - accuracy: 0.9867 - val_loss: 0.1618 - val_accuracy: 0.9572\n","Epoch 8/10\n","469/469 [==============================] - 2s 3ms/step - loss: 0.0323 - accuracy: 0.9885 - val_loss: 0.1524 - val_accuracy: 0.9606\n","Epoch 9/10\n","469/469 [==============================] - 2s 3ms/step - loss: 0.0250 - accuracy: 0.9922 - val_loss: 0.1821 - val_accuracy: 0.9576\n","Epoch 10/10\n","469/469 [==============================] - 2s 3ms/step - loss: 0.0274 - accuracy: 0.9916 - val_loss: 0.2339 - val_accuracy: 0.9462\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7f9c36c54b38>"]},"metadata":{"tags":[]},"execution_count":60}]},{"cell_type":"code","metadata":{"id":"z_TpxxIp4FL5","executionInfo":{"status":"ok","timestamp":1603360527588,"user_tz":-120,"elapsed":627,"user":{"displayName":"Carlos Santana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVvecaHB34gYjkoFZQot-Hnc3Xf1MVl3zUO4FoNL8=s64","userId":"06972008324074016783"}},"outputId":"d4064b98-8cfb-4595-fbdc-ee2b59e45e21","colab":{"base_uri":"https://localhost:8080/","height":281}},"source":["import matplotlib.pyplot as plt\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","\n","# Creamos el generador con las perturbaciones de traslaci√≥n.\n","train_idg = ImageDataGenerator(width_shift_range=0.25, height_shift_range=0.25, rotation_range=90)\n","\n","# Creamos el generador con las perturbaciones de traslaci√≥n.\n","test_idg = ImageDataGenerator(rotation_range=90)\n"," \n","# Cargamos las im√°genes a nuestro preprocesador.\n","gen_train_images = train_idg.flow(X_train.reshape((-1, 28, 28, 1)), Y_train)\n","\n","# Cargamos las im√°genes a nuestro preprocesador.\n","gen_test_images = test_idg.flow(X_test.reshape((-1, 28, 28, 1)), Y_test)\n","\n","idx = 0\n","\n","batchX, batchY = next(gen_train_images)\n","\n","plt.matshow(batchX[idx, :, :, 0])\n","plt.title('Label:' + str(np.argmax(batchY[idx])))\n","plt.axis(False)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 288x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"EethItBzvs-I"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LrK50yuylS-n","executionInfo":{"status":"ok","timestamp":1603360732634,"user_tz":-120,"elapsed":203057,"user":{"displayName":"Carlos Santana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVvecaHB34gYjkoFZQot-Hnc3Xf1MVl3zUO4FoNL8=s64","userId":"06972008324074016783"}},"outputId":"0f00a6ff-d206-4ee6-a3ec-311733acdef5","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["from tensorflow.keras.layers import *\n","from tensorflow.keras import Sequential\n","\n","# Planteado la arquitectura de la red.\n","model = Sequential()\n","\n","model.add(Flatten())\n","model.add(Dense(256, activation='relu'))\n","model.add(Dense(128, activation='relu'))\n","model.add(Dense(64,  activation='relu'))\n","model.add(Dense(32,  activation='relu'))\n","# ...\n","model.add(Dense(10,  activation='softmax'))\n","\n","# Compilamos a la red neuronal. (Funci√≥n de coste; Optimizador.)\n","model.compile(loss='categorical_crossentropy', metrics='accuracy', optimizer='adam')\n","\n","# Entrenar a la red neuronal.\n","model.fit(gen_train_images, epochs=50)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/50\n","469/469 [==============================] - 4s 8ms/step - loss: 1.9447 - accuracy: 0.2872\n","Epoch 2/50\n","469/469 [==============================] - 4s 8ms/step - loss: 1.5367 - accuracy: 0.4564\n","Epoch 3/50\n","469/469 [==============================] - 4s 8ms/step - loss: 1.3199 - accuracy: 0.5433\n","Epoch 4/50\n","469/469 [==============================] - 4s 9ms/step - loss: 1.1707 - accuracy: 0.6056\n","Epoch 5/50\n","469/469 [==============================] - 4s 8ms/step - loss: 1.0555 - accuracy: 0.6455\n","Epoch 6/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.9903 - accuracy: 0.6691\n","Epoch 7/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.9292 - accuracy: 0.6960\n","Epoch 8/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.8778 - accuracy: 0.7159\n","Epoch 9/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.8369 - accuracy: 0.7257\n","Epoch 10/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.7933 - accuracy: 0.7441\n","Epoch 11/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.7798 - accuracy: 0.7413\n","Epoch 12/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.7613 - accuracy: 0.7561\n","Epoch 13/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.7292 - accuracy: 0.7639\n","Epoch 14/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.7052 - accuracy: 0.7734\n","Epoch 15/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.6889 - accuracy: 0.7785\n","Epoch 16/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.6837 - accuracy: 0.7782\n","Epoch 17/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.6731 - accuracy: 0.7814\n","Epoch 18/50\n","469/469 [==============================] - 4s 9ms/step - loss: 0.6373 - accuracy: 0.7961\n","Epoch 19/50\n","469/469 [==============================] - 4s 9ms/step - loss: 0.6442 - accuracy: 0.7906\n","Epoch 20/50\n","469/469 [==============================] - 4s 9ms/step - loss: 0.6390 - accuracy: 0.7943\n","Epoch 21/50\n","469/469 [==============================] - 4s 9ms/step - loss: 0.6102 - accuracy: 0.7997\n","Epoch 22/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.6053 - accuracy: 0.8065\n","Epoch 23/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.5967 - accuracy: 0.8079\n","Epoch 24/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.5922 - accuracy: 0.8070\n","Epoch 25/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.5767 - accuracy: 0.8127\n","Epoch 26/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.5699 - accuracy: 0.8173\n","Epoch 27/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.5654 - accuracy: 0.8171\n","Epoch 28/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.5496 - accuracy: 0.8254\n","Epoch 29/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.5506 - accuracy: 0.8234\n","Epoch 30/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.5527 - accuracy: 0.8219\n","Epoch 31/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.5393 - accuracy: 0.8293\n","Epoch 32/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.5425 - accuracy: 0.8274\n","Epoch 33/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.5201 - accuracy: 0.8347\n","Epoch 34/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.5283 - accuracy: 0.8313\n","Epoch 35/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.5254 - accuracy: 0.8301\n","Epoch 36/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.5021 - accuracy: 0.8377\n","Epoch 37/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.5043 - accuracy: 0.8395\n","Epoch 38/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.5024 - accuracy: 0.8391\n","Epoch 39/50\n","469/469 [==============================] - 4s 9ms/step - loss: 0.4991 - accuracy: 0.8442\n","Epoch 40/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.4981 - accuracy: 0.8408\n","Epoch 41/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.4863 - accuracy: 0.8427\n","Epoch 42/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.4792 - accuracy: 0.8456\n","Epoch 43/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.4722 - accuracy: 0.8467\n","Epoch 44/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.4729 - accuracy: 0.8463\n","Epoch 45/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.4710 - accuracy: 0.8483\n","Epoch 46/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.4658 - accuracy: 0.8521\n","Epoch 47/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.4663 - accuracy: 0.8505\n","Epoch 48/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.4601 - accuracy: 0.8503\n","Epoch 49/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.4663 - accuracy: 0.8496\n","Epoch 50/50\n","469/469 [==============================] - 4s 8ms/step - loss: 0.4389 - accuracy: 0.8571\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7fec6f15d160>"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"iaNW8OSR56UM","executionInfo":{"status":"ok","timestamp":1603363392246,"user_tz":-120,"elapsed":586,"user":{"displayName":"Carlos Santana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVvecaHB34gYjkoFZQot-Hnc3Xf1MVl3zUO4FoNL8=s64","userId":"06972008324074016783"}},"outputId":"53b5d4e5-7360-4fa8-804d-57fccdebe002","colab":{"base_uri":"https://localhost:8080/","height":360}},"source":["model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","flatten (Flatten)            (None, None)              0         \n","_________________________________________________________________\n","dense (Dense)                (None, 256)               200960    \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 128)               32896     \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 64)                8256      \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 32)                2080      \n","_________________________________________________________________\n","dense_4 (Dense)              (None, 10)                330       \n","=================================================================\n","Total params: 244,522\n","Trainable params: 244,522\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"dgU23REv-4FA","executionInfo":{"status":"ok","timestamp":1603358874310,"user_tz":-120,"elapsed":1200,"user":{"displayName":"Carlos Santana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVvecaHB34gYjkoFZQot-Hnc3Xf1MVl3zUO4FoNL8=s64","userId":"06972008324074016783"}},"outputId":"ff82a284-b530-4fc6-898b-a37fe1e61500","colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["batchX, batchY = next(gen_train_images)\n","print(model.evaluate(batchX, batchY))0\n","\n","batchX, batchY = next(gen_test_images)\n","print(model.evaluate(batchX, batchY))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["32/32 [==============================] - 0s 1ms/step - loss: 0.2091 - accuracy: 0.9350\n","[0.20907443761825562, 0.9350000023841858]\n","32/32 [==============================] - 0s 1ms/step - loss: 0.1852 - accuracy: 0.9430\n","[0.18521854281425476, 0.9430000185966492]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"xnWJmYfkvhsK","executionInfo":{"status":"ok","timestamp":1603362949428,"user_tz":-120,"elapsed":565,"user":{"displayName":"Carlos Santana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVvecaHB34gYjkoFZQot-Hnc3Xf1MVl3zUO4FoNL8=s64","userId":"06972008324074016783"}},"outputId":"1f59ad3d-d9d3-4758-f4c3-7494f3730c75","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["idx = 1000\n","\n","img = X_test[idx:(idx+1), :]\n","\n","Yp = np.argmax(model.predict(np.abs(img.reshape((1, 28, 28, 1)) - 1)))\n","print(Yp, np.argmax(Y_test[idx:(idx+1), :]))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2 4\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"zoMDrGwGpAYh"},"source":["**Probad ahora a realizar el mismo ejercicio, pero entrenando al modelo con perturbaciones de posici√≥n Y perturbaciones de rotaci√≥n, y luego evaluadlo con im√°genes de test que s√≥lo contengan perturbaciones de rotaci√≥n**"]},{"cell_type":"code","metadata":{"id":"ZSpD9Rd0pLp6"},"source":["# COMIENZA AQU√ç TU C√ìDIGO. "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"00Ldto2iRlX6"},"source":["## **2. Dise√±ando nuestra primera CNN.**\n","\n","<centered> ![texto alternativo](https://image.shutterstock.com/image-vector/image-classification-machine-learning-convolutional-260nw-1453496747.jpg) </centered>\n","\n","**üëÅ‚Äçüó® ¬øSeremos capaces de mejorar el rendimiento con una Red Neuronal Convolucional?**\n","\n","---\n","\n","\n","üí° **Tu tarea:** Dise√±a, entrena y evalua con Keras una *Red Neuronal Convolucional* con el dataset MNIST aumentado que nos generamos en el ejercicio anterior con las diferentes perturbaciones de traslaci√≥n, rotaci√≥n y ruido (puedes reutilizar tu c√≥digo). \n","\n","Comprueba si esta arquitectura mejora el rendimiento obtenido en comparaci√≥n con la *Red Neuronal Multicapa.* Para ello, obt√©n m√©tricas del rendimiento de la red para tu ***test_set Aumentado*** con la red entrenada ***sin*** y ***con*** datos aumentados. \n","\n","¬øExisten diferencias en los resultados del experimento? Igualmente, compara el n√∫mero de par√°metros utilizados por ambas redes. ¬øCu√°l utiliza un menor n√∫mero de par√°metros? (Recuerda usar para esto la funci√≥n ***model.summary()***).\n","\n","---\n","üì£ **Importante:** Recuerda cambiar el Entorno de ejecuci√≥n en la pesta√±a *{Entorno de ejecuci√≥n}* >  *{Cambiar tipo de entorno de ejecuci√≥n}* el *{Acelerador por Hardware}* de ***None*** a ***GPU***, para que el rendimiento de entrenamiento sea superior."]},{"cell_type":"code","metadata":{"id":"921oq8IcHvWo","executionInfo":{"status":"ok","timestamp":1603708281080,"user_tz":-60,"elapsed":1831,"user":{"displayName":"Carlos Santana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVvecaHB34gYjkoFZQot-Hnc3Xf1MVl3zUO4FoNL8=s64","userId":"06972008324074016783"}}},"source":["import pandas as pd\n","import numpy as np\n","\n","from tensorflow.keras.utils import to_categorical\n","from sklearn.model_selection import train_test_split\n","\n","data = pd.read_csv('./sample_data/mnist_train_small.csv', header=None)\n","\n","# Cargado los datos; Escalado los datos; One-HotCodeado los datos.\n","X = data.values[:, 1:].reshape((-1, 28, 28, 1)) / 255\n","Y = to_categorical(data.values[:, 0:1])\n","\n","# Divisi√≥n de los datos en training y test.\n","X_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size=0.75)"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"9WebMQJQHwTI","executionInfo":{"status":"ok","timestamp":1603708289902,"user_tz":-60,"elapsed":569,"user":{"displayName":"Carlos Santana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVvecaHB34gYjkoFZQot-Hnc3Xf1MVl3zUO4FoNL8=s64","userId":"06972008324074016783"}},"outputId":"9947392f-6b2e-430a-a10b-33fb696b850a","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["X_train.shape, X_test.shape"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((15000, 28, 28, 1), (5000, 28, 28, 1))"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"TAsnYEJaILlb","executionInfo":{"status":"ok","timestamp":1603711166291,"user_tz":-60,"elapsed":597,"user":{"displayName":"Carlos Santana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVvecaHB34gYjkoFZQot-Hnc3Xf1MVl3zUO4FoNL8=s64","userId":"06972008324074016783"}}},"source":["from tensorflow.keras import Sequential\n","from tensorflow.keras.layers import *\n","from tensorflow.keras.optimizers import Adam\n","\n","model = Sequential()\n","\n","# A√±adir capas y capas.\n","model.add(Conv2D(filters=10, kernel_size=11, strides=1, padding='same'))\n","model.add(ReLU())\n","model.add(MaxPool2D(pool_size=2))\n","model.add(Conv2D(filters=20, kernel_size=3, strides=2, padding='same', activation='relu'))\n","model.add(Conv2D(filters=30, kernel_size=3, strides=2, padding='same', activation='relu')) \n","\n","model.add(Flatten())\n","model.add(Dense(100, activation='relu'))\n","\n","# Capa de salida.\n","model.add(Dense(10,  activation='softmax'))\n","\n","model.compile(optimizer=Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics='acc')"],"execution_count":69,"outputs":[]},{"cell_type":"code","metadata":{"id":"0-6PSjH7dt_n","executionInfo":{"status":"ok","timestamp":1603711187500,"user_tz":-60,"elapsed":18946,"user":{"displayName":"Carlos Santana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVvecaHB34gYjkoFZQot-Hnc3Xf1MVl3zUO4FoNL8=s64","userId":"06972008324074016783"}},"outputId":"3fe152a7-638d-4c53-9d39-80e68069ba22","colab":{"base_uri":"https://localhost:8080/","height":401}},"source":["# Entrenamiento del modelo.\n","model.fit(X_train, Y_train, validation_data=(X_test, Y_test), epochs=10)"],"execution_count":70,"outputs":[{"output_type":"stream","text":["Epoch 1/10\n","469/469 [==============================] - 2s 4ms/step - loss: 0.4290 - acc: 0.8701 - val_loss: 0.2147 - val_acc: 0.9314\n","Epoch 2/10\n","469/469 [==============================] - 2s 4ms/step - loss: 0.1368 - acc: 0.9582 - val_loss: 0.1176 - val_acc: 0.9610\n","Epoch 3/10\n","469/469 [==============================] - 2s 4ms/step - loss: 0.0980 - acc: 0.9687 - val_loss: 0.1028 - val_acc: 0.9686\n","Epoch 4/10\n","469/469 [==============================] - 2s 4ms/step - loss: 0.0735 - acc: 0.9761 - val_loss: 0.0775 - val_acc: 0.9746\n","Epoch 5/10\n","469/469 [==============================] - 2s 4ms/step - loss: 0.0573 - acc: 0.9815 - val_loss: 0.0790 - val_acc: 0.9742\n","Epoch 6/10\n","469/469 [==============================] - 2s 4ms/step - loss: 0.0486 - acc: 0.9848 - val_loss: 0.0749 - val_acc: 0.9762\n","Epoch 7/10\n","469/469 [==============================] - 2s 4ms/step - loss: 0.0393 - acc: 0.9871 - val_loss: 0.0887 - val_acc: 0.9750\n","Epoch 8/10\n","469/469 [==============================] - 2s 4ms/step - loss: 0.0339 - acc: 0.9886 - val_loss: 0.0808 - val_acc: 0.9736\n","Epoch 9/10\n","469/469 [==============================] - 2s 4ms/step - loss: 0.0282 - acc: 0.9896 - val_loss: 0.0985 - val_acc: 0.9732\n","Epoch 10/10\n","469/469 [==============================] - 2s 4ms/step - loss: 0.0238 - acc: 0.9915 - val_loss: 0.0822 - val_acc: 0.9776\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7f6480cd45c0>"]},"metadata":{"tags":[]},"execution_count":70}]},{"cell_type":"code","metadata":{"id":"dYDJajjkUYSx","executionInfo":{"status":"ok","timestamp":1603711192199,"user_tz":-60,"elapsed":1311,"user":{"displayName":"Carlos Santana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVvecaHB34gYjkoFZQot-Hnc3Xf1MVl3zUO4FoNL8=s64","userId":"06972008324074016783"}},"outputId":"9832e6a2-ea7b-4da0-e1c1-777d48d41d7f","colab":{"base_uri":"https://localhost:8080/","height":863}},"source":["import matplotlib.pyplot as plt\n","\n","\n","idx = 0\n","img = X_test[idx:(idx+1), :]\n","\n","plt.matshow(img[0,:,:,0])\n","plt.title('Yr: ' + str(np.argmax(Y_test[idx:(idx+1)])))\n","plt.axis(False)\n","plt.show()\n","\n","\n","# Input: [1, 28, 28, 1] ---> Output: [1, 28, 28, 10] \n","fmaps = model.layers[0](img)\n","\n","\n","fig, axs = plt.subplots(2, 5, figsize=(8,4))\n","\n","for i in range(10):\n","\n","  fig.axes[i].matshow(fmaps[0, :, :, i])\n","  fig.axes[i].axis(False)\n","  fig.axes[i].set_title('Feat.m: ' + str(i))\n","\n","\n","# ---- Visualizar pesos -----\n","\n","filtr = model.layers[0].weights[0]\n","\n","fig, axs = plt.subplots(2, 5, figsize=(8,4))\n","\n","for i in range(10):\n","\n","  fig.axes[i].matshow(filtr[:, :, 0, i])\n","  fig.axes[i].axis(False)\n","  fig.axes[i].set_title('Filter: ' + str(i))"],"execution_count":71,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 288x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["WARNING:tensorflow:Layer conv2d_33 is casting an input tensor from dtype float64 to the layer's dtype of float32, which is new behavior in TensorFlow 2.  The layer has dtype float32 because its dtype defaults to floatx.\n","\n","If you intended to run this layer in float32, you can safely ignore this warning. If in doubt, this warning is likely only an issue if you are porting a TensorFlow 1.X model to TensorFlow 2.\n","\n","To change all layers to have dtype float64 by default, call `tf.keras.backend.set_floatx('float64')`. To change just this layer, pass dtype='float64' to the layer constructor. If you are the author of this layer, you can disable autocasting by passing autocast=False to the base Layer constructor.\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x288 with 10 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x288 with 10 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"hGOk5uCJkLBg"},"source":["‚≠ê **Bonus 1:** Visualiza los features maps de tu red entrenada para las diferentes capas, y tambi√©n los filtros de la primera capa. *(Visualizar los filtros de las capas posteriores no aporta una informaci√≥n relevante de para qu√© sirven.)*"]},{"cell_type":"code","metadata":{"id":"jnidV696kxbe"},"source":["# COMIENZA AQU√ç TU C√ìDIGO"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iTDehQubk3xc"},"source":["‚≠ê **Bonus 2:** Una vez ya hemos aprendido a clasificar im√°genes de MNIST con una Red Neuronal Convolucional (CNN), no ser√° complicado generalizar nuestro problema a otros datasets m√°s complejos. En este ejercicio probar√°s a dise√±ar, entrenar y evaluar a una CNN entrenada en el dataset CIFAR100, para 100 clases de objetos diferentes de im√°genes a color. Obt√©n el dataset a trav√©s del m√≥dulo de Keras que ya lo facilita (`tf.keras.datasets.cifar100.load_data(...)`), y recuerda activar la **GPU como m√©todo de aceleraci√≥n por hardware.**\n","\n","<br>\n","\n","<center><img width=\"500\" src=https://vbvsharma.com/assets/images/2019-05-12-CNN-on-CIFAR-10-using-TensorFlow/output_9_0.png></center>"]},{"cell_type":"code","metadata":{"id":"jQ-3PmgDlgel","executionInfo":{"status":"ok","timestamp":1603711461223,"user_tz":-60,"elapsed":1251,"user":{"displayName":"Carlos Santana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVvecaHB34gYjkoFZQot-Hnc3Xf1MVl3zUO4FoNL8=s64","userId":"06972008324074016783"}}},"source":["(X_train, Y_train), (X_test, Y_test) = tf.keras.datasets.cifar100.load_data(label_mode='fine')"],"execution_count":88,"outputs":[]},{"cell_type":"code","metadata":{"id":"rf8sIkTyqc-D"},"source":["# Acc: >30%"],"execution_count":null,"outputs":[]}]}