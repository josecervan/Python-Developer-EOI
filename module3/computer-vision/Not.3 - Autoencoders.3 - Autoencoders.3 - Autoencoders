{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Not.3 - Autoencoders","provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyPXAfsLqv2v5BL0xDhxVsni"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"GPnmF_87O_Vj"},"source":["# **Notebook 3 - Autoencoders.**\n","\n","\n","*   Recuerda que puedes consultar la documentación sobre una función escribiendo **?** justo después de la función: *Ejemplo: np.maximum?*\n","*   Puedes ejecutar el contenido de una celda con el atajo de teclado **CTRL+ENTER**\n","*   Utiliza **TAB** cada vez que quieras autocompletar una llamada a una función.\n","*   Puedes ejecutar instrucciones de bash directamente desde el notebook usando **!** : *Ejemplo: !pip install tensorflow*\n","*   Recuerda que Google es tu amigo, y saber buscar la información en las documentaciones de las librerías es muy importante.\n","*   Una solución correcta no es la que funciona sino la que se entiende!\n","*   No dudes en preguntar cualquier duda al profesor que lleva todo el día "]},{"cell_type":"markdown","metadata":{"id":"g4MJO4UiaCbH"},"source":["## 1. Autoencoders y espacios latentes con MNIST.\n","\n","No... si ya me sabe mal volver al maldito dataset MNIST, pero es que... ya conociéndolo, podemos aprovechar mucho del código que hemos desarrollado en ejercicios anteriores para trabajar más rápido. En cualquier caso, si lo prefieres, puedes trabajar con otros datasets similares. \n","\n","Por ejemplo, puedes probar a trabajar con el ***Fashion MNIST*** (de complementos de moda) o ***notMNIST*** (de diferentes tipografías) o algún otro que traiga más color a tu vida (literal... es decir, con RGB)\n","\n","Hoy lo que vamos a hacer es implementar nuestro propio ***AUTOENCODER***, y con él, extraer vectores de nuestro espacio latente. ¡Al turrón!\n","\n","---\n","\n","**Tarea:** Lo primero en lo que tienes que trabajar es en ENTENDER cómo se puede diseñar un modelo como el ***Autoencoder*** en Keras. Para ello te facilito abajo el código ya implementado. Estúdialo y leéte los comentario de cada linea para llegar a entender a la perfección lo que está sucediendo. Completa los comentarios escribiendo en cada linea la dimensión asociada en cada capa. Recuerda que en este caso construiremos como partes independientes los modelos del ***encoder*** y el ***decoder***, y luego los uniremos para conformar el modelo final: El Autoencoder.\n","\n","**Pregunta**: ¿Qué función de activación crees que es mejor utilizar en la última capa del ***decoder***: ¿*ReLU*, *Sigmoide* o *Softmax*?¿Por qué?\n","\n","Una vez tengas tu *autoencoder* construido y funcionando realiza lo siguiente:\n","\n","1. Haz que tu autoencoder sólo tenga dos neuronas en su cuello de botella y entrena al modelo. Una vez lo tengas, prueba a visualizar una imagen de entrada y el output reconstruido por la red. ¿Es una buena reconstrucción? Si no estás convencido del resultado, comprueba que el autoencoder ha hecho su trabajo, visualizando un ***scatter plot*** donde cada variable latente estará representada en un eje, y donde cada clase esté visualizada de un color. Si tu modelo es correcto, deberías de observar cómo números de clases similares estarán en posiciones cercanas formando clusters.\n"]},{"cell_type":"code","metadata":{"id":"ICtt4INLVwZF","executionInfo":{"status":"ok","timestamp":1603966630188,"user_tz":-60,"elapsed":11434,"user":{"displayName":"Carlos Santana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVvecaHB34gYjkoFZQot-Hnc3Xf1MVl3zUO4FoNL8=s64","userId":"06972008324074016783"}}},"source":["import numpy as np\n","import scipy as sc\n","import sklearn as sk\n","import pandas  as pd\n","import seaborn as sb\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import OneHotEncoder\n","\n","# Cargamos el dataset MNIST.\n","mnist = np.genfromtxt('./sample_data/mnist_train_small.csv', delimiter=',')\n","\n","X = mnist[:, 1: ]\n","Y = OneHotEncoder().fit_transform(mnist[:, 0:1]).toarray()\n","\n","# Escalamos el valor de X\n","X = X / 255.\n","\n","X_train, X_test, Y_train, Y_test = train_test_split(X, Y)"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"0YQE8I8JDZQu","executionInfo":{"status":"error","timestamp":1603966661293,"user_tz":-60,"elapsed":31094,"user":{"displayName":"Carlos Santana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVvecaHB34gYjkoFZQot-Hnc3Xf1MVl3zUO4FoNL8=s64","userId":"06972008324074016783"}},"outputId":"3aabbfec-02a7-46e9-aa67-2bdf40c49c4e","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["from tensorflow.keras.layers import *\n","from tensorflow.keras import *\n","from tensorflow.keras.optimizers import *\n","\n","import numpy as np\n","\n","size = int(np.sqrt(X_train.shape[1]))\n","\n","z = 16 # Tamaño del vector intermedio del autoencoder.\n","\n","# Primero creamos el input para el encoder.\n","inpE = Input(shape=(size, size, 1))                  # N_img, 28, 28, 1\n","\n","# Y cambiamos el input a un vector unidimensional.\n","x = Flatten()(inpE)                                  # N_img, 784\n","x = Dense(256, activation='relu')(x)                 # N_img, 256\n","x = Dense(128, activation='relu')(x)                 # N_img, 128\n","x = Dense(64,  activation='relu')(x)                 # N_img, 64\n","\n","# La última capa del encoder nos da el vector latente.\n","c = Dense(z)(x)                                      # N_img, z=16\n","\n","# Ahora definimos el input del decoder.\n","inpD = Input(shape=(z))                              # N_img, z=16\n","\n","# Y empezamos a revertir los pasos del encoder.\n","x = Dense(64,  activation='relu')(inpD)              # N_img, 64\n","x = Dense(128, activation='relu')(x)                 # N_img, 128\n","x = Dense(256, activation='relu')(x)                 # N_img, 256\n","x = Dense(784, activation='sigmoid')(x)              # N_img, 784\n","\n","# Finalmente recuperamos la forma original de la imagen.\n","x = Reshape(inpE.shape[1:])(x)                      # N_img, 28, 28, 1\n","\n","\" -------- \"\n","\n","# Ahora, para tener el control total de todas las partes del modelo, vamos\n","# a definir cada parte por separado. \n","\n","# El encoder será un modelo cuyo input es\n","# el input del encoder y el output el código.\n","\n","# El decoder será un modelo cuyo input es el input\n","# del decoder y el output la imagen recuperada.\n","encoder = Model(inputs=inpE, outputs=c)\n","decoder = Model(inputs=inpD, outputs=x)\n","\n","\n","# Nos faltaría conectar el encoder con el decoder para formar el autoencoder. \n","\n","# (wow. vaya frase!)\n","\n","# ...y creamos dicho modelo definiendo como input el que acabamos de crear,\n","# y ojo a cómo conseguimos conectar ambas partes. \n","\n","# Contémplalo. Analízalo. Disfrútalo.  \n","autoencoder = Model(inputs=inpE, outputs=decoder(encoder(inpE)))\n","\n","# A partir de aquí simplemente compilamos y optimizamos como hacíamos anteriormente.\n","autoencoder.compile(optimizer=SGD(5), loss='mse')\n","\n","autoencoder.fit(X_train.reshape(-1, size, size, 1), \n","                X_train.reshape(-1, size, size, 1),\n","                validation_data=(X_test.reshape(-1, size, size, 1), \n","                                 X_test.reshape(-1, size, size, 1)),\n","                epochs=100,\n","                batch_size=128)\n","\n","# Cuando hayas terminado de entenderlo, puedes retirar todo el código y\n","# contemplar las pocas lineas que necesitamos para construir nuestro autoencoder."],"execution_count":3,"outputs":[{"output_type":"stream","text":["Epoch 1/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0898 - val_loss: 0.0684\n","Epoch 2/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0650 - val_loss: 0.0657\n","Epoch 3/100\n","118/118 [==============================] - 0s 3ms/step - loss: 0.0610 - val_loss: 0.0612\n","Epoch 4/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0586 - val_loss: 0.0583\n","Epoch 5/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0551 - val_loss: 0.0540\n","Epoch 6/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0510 - val_loss: 0.0503\n","Epoch 7/100\n","118/118 [==============================] - 0s 3ms/step - loss: 0.0472 - val_loss: 0.0466\n","Epoch 8/100\n","118/118 [==============================] - 0s 3ms/step - loss: 0.0436 - val_loss: 0.0453\n","Epoch 9/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0416 - val_loss: 0.0419\n","Epoch 10/100\n","118/118 [==============================] - 0s 3ms/step - loss: 0.0398 - val_loss: 0.0391\n","Epoch 11/100\n","118/118 [==============================] - 0s 3ms/step - loss: 0.0382 - val_loss: 0.0378\n","Epoch 12/100\n","118/118 [==============================] - 0s 3ms/step - loss: 0.0366 - val_loss: 0.0368\n","Epoch 13/100\n","118/118 [==============================] - 0s 3ms/step - loss: 0.0353 - val_loss: 0.0354\n","Epoch 14/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0342 - val_loss: 0.0347\n","Epoch 15/100\n","118/118 [==============================] - 0s 3ms/step - loss: 0.0332 - val_loss: 0.0359\n","Epoch 16/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0323 - val_loss: 0.0340\n","Epoch 17/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0315 - val_loss: 0.0314\n","Epoch 18/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0308 - val_loss: 0.0311\n","Epoch 19/100\n","118/118 [==============================] - 0s 3ms/step - loss: 0.0304 - val_loss: 0.0316\n","Epoch 20/100\n","118/118 [==============================] - 0s 3ms/step - loss: 0.0298 - val_loss: 0.0300\n","Epoch 21/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0293 - val_loss: 0.0304\n","Epoch 22/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0286 - val_loss: 0.0300\n","Epoch 23/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0282 - val_loss: 0.0305\n","Epoch 24/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0277 - val_loss: 0.0277\n","Epoch 25/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0271 - val_loss: 0.0277\n","Epoch 26/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0267 - val_loss: 0.0274\n","Epoch 27/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0261 - val_loss: 0.0262\n","Epoch 28/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0256 - val_loss: 0.0278\n","Epoch 29/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0252 - val_loss: 0.0254\n","Epoch 30/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0247 - val_loss: 0.0266\n","Epoch 31/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0244 - val_loss: 0.0254\n","Epoch 32/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0240 - val_loss: 0.0260\n","Epoch 33/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0236 - val_loss: 0.0240\n","Epoch 34/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0232 - val_loss: 0.0250\n","Epoch 35/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0229 - val_loss: 0.0248\n","Epoch 36/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0224 - val_loss: 0.0236\n","Epoch 37/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0224 - val_loss: 0.0223\n","Epoch 38/100\n","118/118 [==============================] - 0s 3ms/step - loss: 0.0220 - val_loss: 0.0236\n","Epoch 39/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0217 - val_loss: 0.0227\n","Epoch 40/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0215 - val_loss: 0.0220\n","Epoch 41/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0212 - val_loss: 0.0219\n","Epoch 42/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0209 - val_loss: 0.0217\n","Epoch 43/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0208 - val_loss: 0.0235\n","Epoch 44/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0205 - val_loss: 0.0216\n","Epoch 45/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0202 - val_loss: 0.0207\n","Epoch 46/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0202 - val_loss: 0.0219\n","Epoch 47/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0199 - val_loss: 0.0208\n","Epoch 48/100\n","118/118 [==============================] - 0s 3ms/step - loss: 0.0196 - val_loss: 0.0219\n","Epoch 49/100\n","118/118 [==============================] - 0s 4ms/step - loss: 0.0195 - val_loss: 0.0201\n","Epoch 50/100\n","  1/118 [..............................] - ETA: 0s - loss: 0.0203"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-f1118f0cfe97>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     65\u001b[0m                                  X_test.reshape(-1, size, size, 1)),\n\u001b[1;32m     66\u001b[0m                 \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m                 batch_size=128)\n\u001b[0m\u001b[1;32m     68\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m \u001b[0;31m# Cuando hayas terminado de entenderlo, puedes retirar todo el código y\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36m_method_wrapper\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    106\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_method_wrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    107\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_in_multi_worker_mode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 108\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    109\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    110\u001b[0m     \u001b[0;31m# Running inside `run_distribute_coordinator` already.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1096\u001b[0m                 batch_size=batch_size):\n\u001b[1;32m   1097\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1098\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1099\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1100\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    778\u001b[0m       \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    779\u001b[0m         \u001b[0mcompiler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"nonXla\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 780\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    781\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    782\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    805\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    806\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 807\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    808\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    809\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2827\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2828\u001b[0m       \u001b[0mgraph_function\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_define_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2829\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mgraph_function\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_filtered_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2830\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2831\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_filtered_call\u001b[0;34m(self, args, kwargs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1846\u001b[0m                            resource_variable_ops.BaseResourceVariable))],\n\u001b[1;32m   1847\u001b[0m         \u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1848\u001b[0;31m         cancellation_manager=cancellation_manager)\n\u001b[0m\u001b[1;32m   1849\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1850\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_call_flat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcancellation_manager\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1922\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1923\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-> 1924\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1925\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1926\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    548\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    549\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 550\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    551\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    552\u001b[0m           outputs = execute.execute_with_cancellation(\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 60\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     61\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"iVQ3c0w-7ZGF","executionInfo":{"status":"error","timestamp":1603883598141,"user_tz":-60,"elapsed":71925,"user":{"displayName":"Carlos Santana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVvecaHB34gYjkoFZQot-Hnc3Xf1MVl3zUO4FoNL8=s64","userId":"06972008324074016783"}},"outputId":"2379182e-c76c-4818-d61d-7f7462ce0e06","colab":{"base_uri":"https://localhost:8080/","height":200}},"source":["import time\n","from IPython.display import clear_output\n","\n","idx = 0 # Índice de la imagen seleccionada.\n","\n","while True:\n","\n","  # Selecciono una imagen.\n","  img = X_test[idx:(idx+1)]\n","\n","  fig, axs = plt.subplots(1, 3, figsize=(10, 3.5))\n","  # Visualizamos la imagen de entrada.\n","  fig.axes[0].matshow(img.reshape(28, 28), aspect='auto')\n","  fig.axes[0].axis(False)\n","  fig.axes[0].set_title('Input image')\n","\n","  # Visualizamos también el vector latente asociado.\n","  fig.axes[1].matshow(encoder.predict(img.reshape(1, 28, 28, 1)).T)\n","  fig.axes[1].axis('off')\n","  fig.axes[1].set_title('Latent vector')\n","\n","  # Y visualizamos el output del autoencoder.\n","  fig.axes[2].matshow(autoencoder.predict(img.reshape(1, 28, 28, 1))[0,:,:,0], aspect='auto')\n","  fig.axes[2].axis(False)\n","  fig.axes[2].set_title('Reconstr. image')\n","  plt.show()\n","\n","  # Cada cierto tiempo, limpiamos el output y repetimos la visualiazción con\n","  # una nueva imagen.\n","  idx = np.random.randint(len(X_test))\n","  clear_output(wait=True)\n","  time.sleep(3)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-78-fd572e9eb42d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     30\u001b[0m   \u001b[0midx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m   \u001b[0mclear_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m   \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"fyv8H3Mo48R9","executionInfo":{"status":"ok","timestamp":1603883619192,"user_tz":-60,"elapsed":2217,"user":{"displayName":"Carlos Santana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVvecaHB34gYjkoFZQot-Hnc3Xf1MVl3zUO4FoNL8=s64","userId":"06972008324074016783"}},"outputId":"459e0f47-2561-4fd4-a2f9-150ee8349b2b","colab":{"base_uri":"https://localhost:8080/","height":295}},"source":["# Apartado 1 - Visualizar el espacio latente.\n","Z = encoder.predict(X_test)\n","plt.scatter(Z[:, 0], Z[:, 1], alpha=0.5, c=np.argmax(Y_test, axis=1))\n","\n","# Decoramos la gráfica.\n","plt.colorbar()\n","plt.xlabel('Z1')\n","plt.ylabel('Z2')\n","plt.title('Visualización del espacio latente.')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"MsjqbYuy6nBc","executionInfo":{"status":"ok","timestamp":1603884748820,"user_tz":-60,"elapsed":2441,"user":{"displayName":"Carlos Santana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVvecaHB34gYjkoFZQot-Hnc3Xf1MVl3zUO4FoNL8=s64","userId":"06972008324074016783"}},"outputId":"b1a58e28-074d-41a4-ef76-333ed7f4034d","colab":{"base_uri":"https://localhost:8080/","height":78}},"source":["idx1 = 40\n","idx2 = 50\n","\n","# Sacamos las imágenes.\n","img1 = X_test[idx1:(idx1+1)]\n","img2 = X_test[idx2:(idx2+1)]\n","\n","n_img = 20\n","\n","fig, axs = plt.subplots(1, n_img, figsize=(20, 7))\n","\n","# Primero: Sacar el vector latente de cada una.\n","v1 = encoder.predict(img1)\n","v2 = encoder.predict(img2)\n","\n","for i, mix_f in enumerate(np.linspace(0, 1, n_img)):\n","\n","  # Segundo: Calcular el vector interpolado.\n","  vi = v1* (1 - mix_f) + v2 * (mix_f)\n","\n","  # Tercero: Decodificamos el vector resultante.\n","  fig.axes[i].matshow(decoder.predict(vi)[0,:,:,0])\n","  fig.axes[i].axis(False)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 1440x504 with 20 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"nPVq0ql7J5y6"},"source":["## 2. Autoencoder Convolucional.\n","\n","---\n","\n","**Tarea:** Utiliza como referencia la manera en la que hemos implementado el ***Autoencoder*** del ejercicio anterior, para diseñar ahora un ***Autoencoder Convolucional*** que siga el diseño de la imagen inferior. Para ello deberás de definir correctamente los parámetros de la capa *Conv2D()* - por ejemplo el parámetro *filters*, *kernel_size* y el *strides* - y comprobar que las dimensiones se ajustan a lo esperado. En este caso, esta arquitectura no hace uso de las capas de ***MaxPooling()***. Como ya hemos mencionado con anterioridad, el uso de este tipo de capas es discutido y podemos tener la misma opción de reducir el tamaño espacial de cada imagen haciendo uso del *stride* de los filtros.\n","\n","<center><img src=\"https://www.researchgate.net/profile/Xifeng_Guo/publication/320658590/figure/fig1/AS:614154637418504@15234372844108/The-structure-of-proposed-Convolutional-AutoEncoders-CAE-for-MNIST-In-the-middle-there.png\" alt=\"Drawing\" width=\"600px\"/></center>\n","\n","**(Bonus)** Cuando hayas diseñado y entrenado a tu ***Autoencoder Convolucional*** correctamente, puedes experimentar con las siguientes propiedades del modelo:\n"," \n","\n","> **1.** *Autoencoder Denoiser :* Genera una imagen con ruido y comprueba que tu modelo es capaz de eliminarlo. Prueba diferentes con diferentes niveles de ruidos hasta que la reconstrucción no sea posible. En ese punto, prueba a añadir ruido al *input* (utiliza la función implementada hace un par de ejercicios) y entrena a tu ***autoencoder*** para comprobar si tu modelo es capaz de actuar como un *denoiser*.\n","\n","> **2.** *Interpolaciones :* Genera vectores latentes para dos tipos de imágenes y visualízalas. Después haz la interpolación matemática entre los dos vectores, para diferentes grados de mezcla, y con los vectores resultantes, reconstruye las imágenes con el *Decoder()*. ¿Se produce algún tipo de interpolación? ¿Se te ocurre otro tipo de red que pudiera generar interpolaciones de mejor calidad?\n"]},{"cell_type":"code","metadata":{"id":"IJ0z-ZCsRLTm","executionInfo":{"status":"ok","timestamp":1603966701706,"user_tz":-60,"elapsed":11500,"user":{"displayName":"Carlos Santana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVvecaHB34gYjkoFZQot-Hnc3Xf1MVl3zUO4FoNL8=s64","userId":"06972008324074016783"}}},"source":["import numpy as np\n","import scipy as sc\n","import sklearn as sk\n","import pandas  as pd\n","import seaborn as sb\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import OneHotEncoder\n","\n","# Cargamos el dataset MNIST.\n","mnist = np.genfromtxt('./sample_data/mnist_train_small.csv', delimiter=',')\n","\n","X = mnist[:, 1: ]\n","Y = OneHotEncoder().fit_transform(mnist[:, 0:1]).toarray()\n","\n","# Escalamos el valor de X\n","X = X / 255.\n","\n","X_train, X_test, Y_train, Y_test = train_test_split(X, Y)"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"Eoi8qWdLLstn","executionInfo":{"status":"ok","timestamp":1603966778598,"user_tz":-60,"elapsed":72707,"user":{"displayName":"Carlos Santana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVvecaHB34gYjkoFZQot-Hnc3Xf1MVl3zUO4FoNL8=s64","userId":"06972008324074016783"}},"outputId":"30b9a833-0a51-4837-8213-45385d6369b0","colab":{"base_uri":"https://localhost:8080/"}},"source":["s = 28 # Tamaño del la imagen de entrada.\n","z = 10 # Tamaño del vector en el espacio latente.\n","\n","# ------ Arquitectura del ENCODER ------ #\n","\n","# Capa de entrada.\n","inpE = Input((s, s, 1))                                                                            # N_img, 28, 28, 1\n","# Primera capa oculta convolucional.\n","capa = Conv2D(filters=32, kernel_size=3, strides=2, padding='same', activation='relu')(inpE)       # N_img, 14, 14, 32\n","# Segunda capa oculta convolucional.\n","capa = Conv2D(filters=64, kernel_size=3, strides=2, padding='same', activation='relu')(capa)       # N_img,  7, 7,  64\n","# Tercera capa oculta convolucional.\n","conv = Conv2D(filters=128,kernel_size=3, strides=2, activation='relu')(capa)                       # N_img,  3, 3,  128\n","# Aplanamos la capa.\n","capa = Flatten()(conv)                                                                             # N_img, 1152\n","# Capa de salida del encoder. (Cuello de botella)\n","c = Dense(z, activation='relu')(capa)                                                              # N_img, 10\n","\n","encoder = Model(inputs=inpE, outputs=c)\n","\n","\n","# ------ Arquitectura del DECODER ------ #\n","\n","# Capa de entrada.\n","inpD = Input((z))\n","# Primera capa oculta densa.\n","capa = Dense(capa.shape[1])(inpD)\n","# Hacemos el reshape al bloque convolucional.\n","capa = Reshape((conv.shape[1:]))(capa)\n","# Primera capa deconvolucional.\n","capa = Conv2DTranspose(filters=64, kernel_size=3, strides=2, activation='relu')(capa)\n","# Segunda capa deconvolucional.\n","capa = Conv2DTranspose(filters=32, kernel_size=3, strides=2, padding='same', activation='relu')(capa)\n","# Tercera capa deconvolucional.\n","outp = Conv2DTranspose(filters=1,  kernel_size=3, strides=2, padding='same', activation='sigmoid')(capa)\n","\n","decoder = Model(inputs=inpD, outputs=outp)\n","\n","# ------ Arquitectura del AUTOENCODER ------ #\n","autoencoder = Model(inputs=inpE, outputs=decoder(encoder(inpE)))\n","\n","\n","# ---- Entrenamos al modelo. ------ #\n","autoencoder.compile(optimizer=SGD(5), loss='mse')\n","\n","autoencoder.fit(X_train.reshape(-1, size, size, 1), \n","                X_train.reshape(-1, size, size, 1),\n","                validation_data=(X_test.reshape(-1, size, size, 1), \n","                                 X_test.reshape(-1, size, size, 1)),\n","                epochs=100,\n","                batch_size=128)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Epoch 1/100\n","118/118 [==============================] - 1s 8ms/step - loss: 0.0964 - val_loss: 0.0953\n","Epoch 2/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0945 - val_loss: 0.0949\n","Epoch 3/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0938 - val_loss: 0.0937\n","Epoch 4/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0841 - val_loss: 0.0673\n","Epoch 5/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0656 - val_loss: 0.0679\n","Epoch 6/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0514 - val_loss: 0.0420\n","Epoch 7/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0414 - val_loss: 0.0383\n","Epoch 8/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0367 - val_loss: 0.0377\n","Epoch 9/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0342 - val_loss: 0.0326\n","Epoch 10/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0323 - val_loss: 0.0324\n","Epoch 11/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0311 - val_loss: 0.0297\n","Epoch 12/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0289 - val_loss: 0.0308\n","Epoch 13/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0270 - val_loss: 0.0270\n","Epoch 14/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0257 - val_loss: 0.0263\n","Epoch 15/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0249 - val_loss: 0.0260\n","Epoch 16/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0241 - val_loss: 0.0273\n","Epoch 17/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0237 - val_loss: 0.0255\n","Epoch 18/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0232 - val_loss: 0.0258\n","Epoch 19/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0226 - val_loss: 0.0233\n","Epoch 20/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0223 - val_loss: 0.0219\n","Epoch 21/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0219 - val_loss: 0.0244\n","Epoch 22/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0215 - val_loss: 0.0235\n","Epoch 23/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0213 - val_loss: 0.0221\n","Epoch 24/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0209 - val_loss: 0.0236\n","Epoch 25/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0207 - val_loss: 0.0217\n","Epoch 26/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0205 - val_loss: 0.0234\n","Epoch 27/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0201 - val_loss: 0.0210\n","Epoch 28/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0200 - val_loss: 0.0226\n","Epoch 29/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0199 - val_loss: 0.0214\n","Epoch 30/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0197 - val_loss: 0.0215\n","Epoch 31/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0194 - val_loss: 0.0215\n","Epoch 32/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0192 - val_loss: 0.0196\n","Epoch 33/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0192 - val_loss: 0.0204\n","Epoch 34/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0190 - val_loss: 0.0197\n","Epoch 35/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0188 - val_loss: 0.0194\n","Epoch 36/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0187 - val_loss: 0.0204\n","Epoch 37/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0185 - val_loss: 0.0213\n","Epoch 38/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0182 - val_loss: 0.0203\n","Epoch 39/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0185 - val_loss: 0.0205\n","Epoch 40/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0183 - val_loss: 0.0191\n","Epoch 41/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0181 - val_loss: 0.0180\n","Epoch 42/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0180 - val_loss: 0.0212\n","Epoch 43/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0180 - val_loss: 0.0202\n","Epoch 44/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0177 - val_loss: 0.0197\n","Epoch 45/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0176 - val_loss: 0.0181\n","Epoch 46/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0177 - val_loss: 0.0196\n","Epoch 47/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0175 - val_loss: 0.0183\n","Epoch 48/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0174 - val_loss: 0.0186\n","Epoch 49/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0173 - val_loss: 0.0193\n","Epoch 50/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0171 - val_loss: 0.0180\n","Epoch 51/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0172 - val_loss: 0.0202\n","Epoch 52/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0172 - val_loss: 0.0185\n","Epoch 53/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0169 - val_loss: 0.0222\n","Epoch 54/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0169 - val_loss: 0.0177\n","Epoch 55/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0168 - val_loss: 0.0183\n","Epoch 56/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0170 - val_loss: 0.0173\n","Epoch 57/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0166 - val_loss: 0.0179\n","Epoch 58/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0165 - val_loss: 0.0207\n","Epoch 59/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0167 - val_loss: 0.0180\n","Epoch 60/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0165 - val_loss: 0.0186\n","Epoch 61/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0163 - val_loss: 0.0168\n","Epoch 62/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0162 - val_loss: 0.0165\n","Epoch 63/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0163 - val_loss: 0.0175\n","Epoch 64/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0161 - val_loss: 0.0182\n","Epoch 65/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0163 - val_loss: 0.0168\n","Epoch 66/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0161 - val_loss: 0.0168\n","Epoch 67/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0160 - val_loss: 0.0182\n","Epoch 68/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0159 - val_loss: 0.0180\n","Epoch 69/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0158 - val_loss: 0.0165\n","Epoch 70/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0160 - val_loss: 0.0177\n","Epoch 71/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0159 - val_loss: 0.0174\n","Epoch 72/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0157 - val_loss: 0.0174\n","Epoch 73/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0159 - val_loss: 0.0178\n","Epoch 74/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0156 - val_loss: 0.0171\n","Epoch 75/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0156 - val_loss: 0.0161\n","Epoch 76/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0155 - val_loss: 0.0171\n","Epoch 77/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0155 - val_loss: 0.0168\n","Epoch 78/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0155 - val_loss: 0.0179\n","Epoch 79/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0155 - val_loss: 0.0176\n","Epoch 80/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0154 - val_loss: 0.0167\n","Epoch 81/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0152 - val_loss: 0.0158\n","Epoch 82/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0154 - val_loss: 0.0193\n","Epoch 83/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0154 - val_loss: 0.0164\n","Epoch 84/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0151 - val_loss: 0.0183\n","Epoch 85/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0151 - val_loss: 0.0163\n","Epoch 86/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0152 - val_loss: 0.0175\n","Epoch 87/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0149 - val_loss: 0.0160\n","Epoch 88/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0151 - val_loss: 0.0186\n","Epoch 89/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0149 - val_loss: 0.0162\n","Epoch 90/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0149 - val_loss: 0.0172\n","Epoch 91/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0150 - val_loss: 0.0192\n","Epoch 92/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0150 - val_loss: 0.0171\n","Epoch 93/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0149 - val_loss: 0.0161\n","Epoch 94/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0148 - val_loss: 0.0167\n","Epoch 95/100\n","118/118 [==============================] - 1s 5ms/step - loss: 0.0149 - val_loss: 0.0158\n","Epoch 96/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0147 - val_loss: 0.0166\n","Epoch 97/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0147 - val_loss: 0.0161\n","Epoch 98/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0146 - val_loss: 0.0186\n","Epoch 99/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0147 - val_loss: 0.0157\n","Epoch 100/100\n","118/118 [==============================] - 1s 6ms/step - loss: 0.0145 - val_loss: 0.0180\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7f87758817f0>"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"0Ho4uyQQ3nSv","executionInfo":{"status":"ok","timestamp":1603967492785,"user_tz":-60,"elapsed":525,"user":{"displayName":"Carlos Santana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVvecaHB34gYjkoFZQot-Hnc3Xf1MVl3zUO4FoNL8=s64","userId":"06972008324074016783"}},"outputId":"cfdc33dc-371a-421f-d508-6cb5bed5c309","colab":{"base_uri":"https://localhost:8080/","height":150}},"source":["# Método que añade ruido a una imagen dada.\n","def add_noise(img, f):\n","    noise = (np.random.rand(28, 28, 1) * 2 - 1) * f\n","    img = np.clip(img + noise, 0., 1.)\n","    return img\n","\n","\n","\n","# Selecciono una imagen.\n","idx = 200 # Índice de la imagen seleccionada.\n","img = X_test[idx:(idx+1)]\n","\n","fig, axs = plt.subplots(1, 3)\n","\n","fig.axes[0].matshow(img.reshape(28, 28))\n","fig.axes[0].axis(False)\n","fig.axes[0].set_title('Input img')\n","\n","nImg = add_noise(img.reshape(28, 28, 1), 0.5)[:,:,0]\n","fig.axes[1].matshow(nImg)\n","fig.axes[1].axis(False)\n","fig.axes[1].set_title('Noise img')\n","\n","dImg = autoencoder.predict(nImg.reshape(1, 28, 28, 1))\n","fig.axes[2].matshow(dImg[0,:,:,0])\n","fig.axes[2].axis(False)\n","fig.axes[2].set_title('Decod. img')\n","plt.show()"],"execution_count":39,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 3 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"HIPgZ0QD6wI6","executionInfo":{"status":"ok","timestamp":1603968845111,"user_tz":-60,"elapsed":804,"user":{"displayName":"Carlos Santana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVvecaHB34gYjkoFZQot-Hnc3Xf1MVl3zUO4FoNL8=s64","userId":"06972008324074016783"}},"outputId":"8593ca58-6a9a-4e0f-90cd-64da5cd8f8be","colab":{"base_uri":"https://localhost:8080/","height":550}},"source":["from PIL import Image\n","im = Image.open(\"./05.png\")\n","im = np.mean(np.array(im.resize((28, 28))) / 255, axis=2)\n","\n","plt.matshow(im, cmap='gray')\n","\n","ou = autoencoder.predict(im.reshape(1, 28, 28, 1))\n","plt.matshow(ou[0,:,:,0], cmap='gray')"],"execution_count":73,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f877364af98>"]},"metadata":{"tags":[]},"execution_count":73},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 288x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 288x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"dIQNklYA_o7d","executionInfo":{"status":"ok","timestamp":1603968891467,"user_tz":-60,"elapsed":533,"user":{"displayName":"Carlos Santana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVvecaHB34gYjkoFZQot-Hnc3Xf1MVl3zUO4FoNL8=s64","userId":"06972008324074016783"}},"outputId":"125d470f-f481-40c8-cd22-18b8d2e45ff2","colab":{"base_uri":"https://localhost:8080/"}},"source":["autoencoder.evaluate(im.reshape(1, 28, 28, 1), im.reshape(1, 28, 28, 1))"],"execution_count":75,"outputs":[{"output_type":"stream","text":["1/1 [==============================] - 0s 1ms/step - loss: 0.2520\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["0.2519931197166443"]},"metadata":{"tags":[]},"execution_count":75}]},{"cell_type":"code","metadata":{"id":"aNuBo9Xr_xa8","executionInfo":{"status":"ok","timestamp":1603969394117,"user_tz":-60,"elapsed":889,"user":{"displayName":"Carlos Santana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVvecaHB34gYjkoFZQot-Hnc3Xf1MVl3zUO4FoNL8=s64","userId":"06972008324074016783"}},"outputId":"1ac50ee2-0b9f-42b4-8f99-5710c3fbe685","colab":{"base_uri":"https://localhost:8080/","height":567}},"source":["idx = 199 # Índice de la imagen seleccionada.\n","img = X_test[idx:(idx+1)]\n","\n","\n","from scipy import ndimage\n","rImg = ndimage.rotate(img.reshape(28, 28), 90)\n","\n","plt.matshow(rImg)\n","autoencoder.evaluate(rImg.reshape(1, 28, 28, 1), rImg.reshape(1, 28, 28, 1))\n","plt.matshow(autoencoder.predict(rImg.reshape(1, 28, 28, 1))[0,:,:,0])"],"execution_count":88,"outputs":[{"output_type":"stream","text":["1/1 [==============================] - 0s 1ms/step - loss: 0.0541\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f881b199358>"]},"metadata":{"tags":[]},"execution_count":88},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 288x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 288x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}